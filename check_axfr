#!/usr/bin/perl -w
#
# Copyright (C) 1998 David Eckelkamp
#           (C) 2005 Ondrej Sury
#           (C) 2012 Wil Cooley
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# FIXME:
#   * "timeout" is used both as the script time-out and as the DNS query
#   time-out, which makes more than one unlikely. Probably should distinguish
#   between the two.
#

require 5.004;
use strict;
use English;
use Net::DNS;
use Nagios::Plugin;

my $VERSION = '0.2.0';

$ENV{'PATH'}='';
$ENV{'BASH_ENV'}='';
$ENV{'ENV'}='';

my $np = Nagios::Plugin->new(
    shortname => 'SOA SERIAL',
    version => $VERSION,
    url     => 'http://github.com/wcooley/nagios-plugin-axfr',
    blurb   => 'Check zone on slave DNS server for freshness',
    usage   => 'Usage: %s -H <host> [ -v|--verbose ]'
        . ' [ -c| --critical=<threshold> [ -w| --warning=<threshold> ] ]'
        . ' [ -M|master=<master> ] [ -z|--zone=<zone>]'
        . ' [ -t|--timeout=<seconds> ] [ -r|retries=<retries>]'
        ,
);

$np->add_arg(
    spec  => 'host|H=s',
    label => 'HOSTNAME',
    help  => 'HOSTNAME of DNS slave under scrutiny.');
$np->add_arg(
    spec  => 'master|M=s',
    help  => 'HOSTNAME of DNS master or upstream.',
    label => 'HOSTNAME',
    required => 1);
$np->add_arg(
    spec  => 'zone|z=s',
    label => 'ZONE',
    help  => 'Check serial for ZONE.',
    required => 1);
$np->add_arg(
    spec  => 'critical|c=i',
    label => 'COUNT',
    default => 0,
    help  => 'Exit with CRITICAL status if slave\'s serial is COUNT behind master\'s (default: %s)');
$np->add_arg(
    spec  => 'warning|w=i',
    label => 'COUNT',
    default => 0,
    help  => 'Exit with WARNING status if slave\'s serial is COUNT behind master\'s (default: %s)');
$np->add_arg(
    spec  => 'retries|r=i',
    label => 'COUNT',
    default => 2,
    help  => 'Try to query DNS server up to COUNT times (default: %s).');

$np->getopts();

my $host = $np->opts->host;
my $zone = $np->opts->zone;
my $master = $np->opts->master;
my $verbose = $np->opts->verbose;

$np->set_thresholds(
    warning  => $np->opts->warning,
    critical => $np->opts->critical,
);

my $master_serial = get_serial($master, $np);
verbose("Got serial '%d' from host '%s' for zone '%s'.", $master_serial, $master, $zone);

my $slave_serial = get_serial($host, $np);
verbose("Got serial '%d' from host '%s' for zone '%s'.", $slave_serial, $host, $zone);

my $serial_lag = $master_serial - $slave_serial;

$np->add_perfdata(
    label     => 'serial_lag',
    value     => $serial_lag,
    threshold => $np->threshold,
);

$np->add_perfdata(
    label => 'serial',
    value => $master_serial,
);

$np->nagios_exit(
    return_code => $np->check_threshold($master_serial - $slave_serial),
    message     => " serial lag ${serial_lag}",
);

#### subs

sub get_serial {
    my ($ns, $np) = @_;

    my $zone = $np->opts->zone;

    my $res = new Net::DNS::Resolver;
    $res->defnames(0);
    $res->recurse(0);
    $res->tcp_timeout($np->opts->timeout);
    $res->udp_timeout($np->opts->timeout);
    $res->retry($np->opts->retries);
    $res->nameservers($ns);

    my $soa_req = $res->query($zone, 'SOA');

    if (!defined($soa_req) || ($soa_req->header->ancount <= 0)) {
        $np->nagios_die("SOA query for zone '$zone' to "
                        . "nameserver '$ns' failed: " . $res->errorstring);
    }

    $np->nagios_die("Nameserver '$ns' in not authoritative for zone '$zone'")
        unless ($soa_req->header->aa);

    $np->nagios_die("Too many answers for SOA query "
                        . "from nameserver '$ns' for zone '$zone'")
        unless ($soa_req->header->ancount == 1);

    $np->nagios_die("Query for SOA for zone '$zone' "
                        . "from nameserver '$ns' failed: return type = "
                        . ($soa_req->answer)[0]->type)
        unless (($soa_req->answer)[0]->type eq 'SOA');

    my $serial = ($soa_req->answer)[0]->serial();

    return $serial;
}

sub verbose {
    if ($verbose) {
        printf @_;
        print "\n";
    }
}
